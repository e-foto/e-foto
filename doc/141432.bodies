class EOQuality
!!!215928.cpp!!!	getV() : Matrix
    return V;
!!!216056.cpp!!!	getsigma0Squared() : double
    return sigma0Squared;
!!!216184.cpp!!!	getSigmaXa() : Matrix
    return SigmaXa;
!!!216312.cpp!!!	getSigmaLa() : Matrix
    return SigmaLa;
!!!216440.cpp!!!	objectType(in  : void) : string
    return "EOQuality";
!!!216568.cpp!!!	objectAssociations(in  : void) : string
    return "";
!!!216696.cpp!!!	is(in s : string) : bool
    return (s == "EOQuality" ? true : false);
!!!216824.cpp!!!	xmlSetData(in xml : string) : void
    EDomElement root(xml);
    V.xmlSetData(root.elementByTagName("V").elementByTagName("mml:matrix").getContent());
    if (root.elementByTagName("sigma0Squared").isAvailable())
        sigma0Squared = root.elementByTagName("sigma0Squared").toDouble();
    else
        sigma0Squared = 1.0;
    if (root.elementByTagName("SigmaXa").isAvailable())
        SigmaXa.xmlSetData(root.elementByTagName("SigmaXa").elementByTagName("mml:matrix").getContent());
    else
        SigmaXa.identity(6);
    if (root.elementByTagName("SigmaLa").isAvailable())
        SigmaLa.xmlSetData(root.elementByTagName("SigmaLa").elementByTagName("mml:matrix").getContent());
    else
        SigmaLa.identity(1);
!!!216952.cpp!!!	xmlGetData() : string
    stringstream result;
    result << "<quality>\n";
    result << "<V>\n";
    result << V.xmlGetData();
    result << "</V>\n";
    if (sigma0Squared == 1.0)
        result << "<sigma0Squared>Not Available</sigma0Squared>\n";
    else
        result << "<sigma0Squared>" << Conversion::doubleToString(sigma0Squared) << "</sigma0Squared>\n";
    if (SigmaXa.isIdentity())
        result << "<SigmaXa>Not Available</SigmaXa>\n";
    else
    {
        result << "<SigmaXa>\n";
        result << SigmaXa.xmlGetData();
        result << "</SigmaXa>\n";
    }
    if (SigmaLa.isIdentity())
        result << "<SigmaLa>Not Available</SigmaLa>\n";
    else
    {
        result << "<SigmaLa>\n";
        result << SigmaLa.xmlGetData();
        result << "</SigmaLa>\n";
    }
    result << "</quality>\n";
    return result.str();
!!!217080.cpp!!!	calculate(inout myEO : SpatialRessection) : void
 
    V = myEO->getLb() - myEO->getLastL0();
    sigma0Squared = (((V.transpose() * myEO->getP()) * V) / (myEO->getLb().getRows() - myEO->getXa().getRows())).get(1,1);
    SigmaXa = ((myEO->getA().transpose() * myEO->getP()) * myEO->getA()).inverse() * sigma0Squared;
    SigmaLa = ((myEO->getA() * ((myEO->getA().transpose() * myEO->getP()) * myEO->getA()).inverse()) * myEO->getA().transpose()) * sigma0Squared;
