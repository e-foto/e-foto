class Image
!!!224760.cpp!!!	Image()

!!!224888.cpp!!!	Image(in myId : int, in mySensorId : int)
    id = myId;
    sensorId = mySensorId;
!!!225016.cpp!!!	~Image()

!!!225144.cpp!!!	setId(in newId : int) : void
    id = newId;
!!!225272.cpp!!!	setSensorId(in newSensorId : int) : void
    sensorId = newSensorId;
!!!225400.cpp!!!	setFlightId(in newFlightId : int) : void
    flightId = newFlightId;
!!!225528.cpp!!!	setResolution(in newResolution : uint) : void
    resolution = newResolution;
!!!225656.cpp!!!	setResolutionUnit(in newResolutionUnit : string) : void
    resolutionUnit = newResolutionUnit;
!!!225784.cpp!!!	setWidth(in newWidth : uint) : void
    width = newWidth;
!!!225912.cpp!!!	setHeight(in newHeight : uint) : void
    height = newHeight;
!!!226040.cpp!!!	setFilename(in newFilename : string) : void
    filename = newFilename;
!!!226168.cpp!!!	setFilepath(in newFilepath : string) : void
    filepath = newFilepath;
!!!226296.cpp!!!	getId() : int
    return id;
!!!226424.cpp!!!	getSensorId() : int
    return sensorId;
!!!226552.cpp!!!	getFlightId() : int
    return flightId;
!!!226680.cpp!!!	getResolution() : uint
    return resolution;
!!!226808.cpp!!!	getResolutionUnit() : string
    return resolutionUnit;
!!!226936.cpp!!!	getWidth() : uint
    return width;
!!!227064.cpp!!!	getHeight() : uint
    return height;
!!!227192.cpp!!!	getFilename() : string
    return filename;
!!!227320.cpp!!!	getFilepath() : string
    return filepath;
!!!227448.cpp!!!	isGnssAvailable() : bool
	return gnssAvailable;
!!!227576.cpp!!!	isInsAvailable() : bool
	return insAvailable;
!!!227704.cpp!!!	getGnssX0() : double
	return gnssX0;
!!!227832.cpp!!!	getGnssY0() : double
	return gnssY0;
!!!227960.cpp!!!	getGnssZ0() : double
	return gnssZ0;
!!!228088.cpp!!!	getGnssType() : string
	return gnssType;
!!!228216.cpp!!!	getInsOmega() : double
	return insOmega;
!!!228344.cpp!!!	getInsPhi() : double
	return insPhi;
!!!228472.cpp!!!	getInsKappa() : double
	return insKappa;
!!!228600.cpp!!!	getInsType() : string
	return insType;
!!!228728.cpp!!!	setDigFidMarks(in newDigFidMarks : deque<DigitalFiductialMark>) : void
    digFidMarks = newDigFidMarks;
!!!228856.cpp!!!	getDigFidMarks() : deque<DigitalFiductialMark>
    return digFidMarks;
!!!228984.cpp!!!	putDigFidMark(in newDigFidMark : DigitalFiductialMark) : void
    if (digFidMarks.empty())
    {
        digFidMarks.push_back(newDigFidMark);
    }
    else
    {
        if (digFidMarks.back().getId() < newDigFidMark.getId())
        {
            digFidMarks.push_back(newDigFidMark);
        }
        else
        {
            for (unsigned int i = 0; i < digFidMarks.size(); i++)
            {
                if (digFidMarks.at(i).getId() > newDigFidMark.getId())
                {
                    digFidMarks.insert(digFidMarks.begin()+i,newDigFidMark);
                    break;
                }
            }
        }
    }
!!!229112.cpp!!!	getDigFidMark(in id : int) : DigitalFiductialMark
    for (unsigned int i = 0; i < digFidMarks.size(); i++)
	if (digFidMarks.at(i).getId() == id)
            return digFidMarks.at(i);
    return DigitalFiductialMark();
!!!229240.cpp!!!	getDigFidMarkAt(in index : uint) : DigitalFiductialMark
    if (index < digFidMarks.size())
        return digFidMarks.at(index);
    return DigitalFiductialMark();
!!!229368.cpp!!!	countDigFidMarks() : int
    return digFidMarks.size();
!!!229496.cpp!!!	deleteDigFidMark(in id : int) : void
    for (unsigned int i = 0; i < digFidMarks.size(); i++)
        if (digFidMarks.at(i).getId() == id)
            digFidMarks.erase(digFidMarks.begin()+i);
!!!229624.cpp!!!	deleteDigFidMarkAt(in index : uint) : void
    if (index < digFidMarks.size())
        digFidMarks.erase(digFidMarks.begin()+index);
!!!229752.cpp!!!	clearDigFidMarks() : void
    digFidMarks.clear();
!!!229880.cpp!!!	setSensor(inout newSensor : Sensor) : void
    mySensor = newSensor;
!!!230008.cpp!!!	getSensor() : Sensor
    return mySensor;
!!!230136.cpp!!!	setFlight(inout newFlight : Flight) : void
    myFlight = newFlight;
!!!230264.cpp!!!	getFlight() : Flight
    return myFlight;
!!!230392.cpp!!!	setIO(inout newIO : InteriorOrientation) : void
    myIO = newIO;
!!!230520.cpp!!!	getIO() : InteriorOrientation
    return myIO;
!!!230648.cpp!!!	setEO(inout newEO : SpatialRessection) : void
    myEO = newEO;
!!!230776.cpp!!!	getEO() : SpatialRessection
    return myEO;
!!!230904.cpp!!!	putPoint(inout newPointAssociation : Point) : void
    bool insert = true;
    for (unsigned int i = 0; i < myPoints.size(); i++)
        if (myPoints.at(i) == newPointAssociation)
            insert = false;
    if (insert)
        myPoints.push_back(newPointAssociation);
!!!231032.cpp!!!	getPoint(in pointId : int) : Point
    for (unsigned int i = 0; i < myPoints.size(); i++)
	if (myPoints.at(i)->getId() == pointId)
            return myPoints.at(i);
    return NULL;
!!!231160.cpp!!!	countPoints() : int
    return myPoints.size();
!!!231288.cpp!!!	getPointAt(in index : uint) : Point
    if (index < myPoints.size())
        return myPoints.at(index);
    return NULL;
!!!231416.cpp!!!	objectType(in  : void) : string
    stringstream result;
    result << "Image " << id;
    return result.str();
!!!231544.cpp!!!	objectAssociations(in  : void) : string
    stringstream result;
    result << mySensor->objectType() << " " << myFlight->objectType();
    return result.str();
!!!231672.cpp!!!	is(in s : string) : bool
    return (s == "Image" ? true : false);
!!!231800.cpp!!!	xmlSetData(in xml : string) : void
    EDomElement root(xml);
    id = Conversion::stringToInt(root.attribute("key"));
    sensorId = Conversion::stringToInt(root.attribute("sensor_key"));
    flightId = Conversion::stringToInt(root.attribute("flight_key"));
	imageId = root.elementByTagName("imageId").toString();
    width = root.elementByTagName("width").toInt();
    height = root.elementByTagName("height").toInt();
    filename = root.elementByTagName("fileName").toString();
    filepath = root.elementByTagName("filePath").toString();
    resolution = root.elementByTagName("resolution").toInt();
    resolutionUnit = root.elementByTagName("resolution").attribute("uom");

    //Isso deve ser corrigido...
    //spatialCoordinates.xmlSetData(root.elementByTagName("spatialCoordinates").getContent());

    EDomElement gnss = root.elementByTagName("GNSS");
    deque<double> gnssPos = gnss.elementByTagName("gml:pos").toGmlPos();
    if (gnssPos.size() == 3)
    {
	gnssAvailable = true;
	gnssType = gnss.attribute("type");
	gnssX0 = gnssPos.at(0);
	gnssY0 = gnssPos.at(1);
	gnssZ0 = gnssPos.at(2);
    }
    else
    {
	gnssAvailable = false;
    }
    if (gnss.getContent() == "" || gnss.elementByTagName("sigma").toString() == "Not Available")
    {
	gnssSigmaAvailable = false;
    }
    else
    {
	gnssSigmaAvailable = true;
        gnssSigma.xmlSetData(gnss.elementByTagName("sigma").getContent());
    }

    EDomElement ins = root.elementByTagName("INS");
    if (ins.getContent() == "" || ins.elementByTagName("omega").toString() == "Not Available")
    {
	insAvailable = false;
    }
    else
    {
	insAvailable = true;
	insType = ins.attribute("type");
	insOmega = ins.elementByTagName("omega").toDouble();
	insPhi = ins.elementByTagName("phi").toDouble();
	insKappa = ins.elementByTagName("kappa").toDouble();
    }
    if (ins.elementByTagName("sigma").toString() == "Not Available")
    {
	insSigmaAvailable = false;
    }
    else
    {
	insSigmaAvailable = true;
        insSigma.xmlSetData(ins.elementByTagName("sigma").getContent());
    }

    // Fim da gambiarra temporaria.
!!!231928.cpp!!!	xmlGetData() : string
    stringstream result;
    result << "<image key=\"" << Conversion::intToString(id) << "\" sensor_key=\"" << Conversion::intToString(sensorId) << "\" flight_key=\"" << Conversion::intToString(flightId) << "\">\n";
	result << "<imageId>" << imageId << "</imageId>\n";
    result << "<width uom=\"#px\">" << Conversion::intToString(width) << "</width>\n";
    result << "<height uom=\"#px\">" << Conversion::intToString(height) << "</height>\n";
    result << "<fileName>" << filename << "</fileName>\n";
    result << "<filePath>" << filepath << "</filePath>\n";
    result << "<resolution uom=\"" << resolutionUnit << "\">" << Conversion::intToString(resolution) << "</resolution>\n";

    //Isso deve ser corrigido...
    //result << spatialCoordinates.xmlGetData();

	result << "<GNSS uom=\"#m\" type=\"" << gnssType << "\">\n";
    if (gnssAvailable)
    {
        result << "<gml:pos>" << Conversion::doubleToString(gnssX0) << " " << Conversion::doubleToString(gnssY0) << " " << Conversion::doubleToString(gnssZ0) << "</gml:pos>\n";
    }
    else
    {
	result << "<gml:pos>Not Available</gml:pos>\n";
    }
    if (gnssSigmaAvailable)
    {
	result << "<sigma>" << gnssSigma.xmlGetData() << "</gml:sigma>\n";
    }
    else
    {
	result << "<sigma>Not Available</sigma>\n";
    }
    result << "</GNSS>\n";

	result << "<INS uom=\"#rad\" type=\"" << insType << "\">\n";
    if (insAvailable)
    {
        result << "<omega>" << Conversion::doubleToString(insOmega) <<"</sigma>\n";
        result << "<phi>" << Conversion::doubleToString(insPhi) <<"</sigma>\n";
        result << "<kappa>" << Conversion::doubleToString(insKappa) <<"</sigma>\n";
    }
    else
    {
	result << "<omega>Not Available</omega>\n";
	result << "<phi>Not Available</phi>\n";
	result << "<kappa>Not Available</kappa>\n";
    }
    if (insSigmaAvailable)
    {
	result << "<sigma>" << insSigma.xmlGetData() << "</gml:sigma>\n";
    }
    else
    {
	result << "<sigma>Not Available</sigma>\n";
    }
    result << "</INS>\n";

    //Fim da gambiarra temporaria.

    result << "</image>\n";
    return result.str();
!!!232056.cpp!!!	load() : int
    return 0;
