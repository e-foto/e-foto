class SensorWithFiducialMarks
!!!252280.cpp!!!	SensorWithFiducialMarks()

!!!252408.cpp!!!	SensorWithFiducialMarks(in sensor : Sensor)

!!!252536.cpp!!!	SensorWithFiducialMarks(in myId : int)

!!!252664.cpp!!!	SensorWithFiducialMarks(in myId : int, in myLb : Matrix)
	setLb(myLb);
!!!252792.cpp!!!	SensorWithFiducialMarks(in myId : int, in myLb : Matrix, in mySigmaLb : Matrix)
	setLb(myLb, mySigmaLb);
!!!252920.cpp!!!	setLb(in newLb : Matrix) : void
	if (newLb.getRows() >= 8 && newLb.getCols() == 1)
	{
		Lb = newLb;
		SigmaLb.resize(newLb.getRows(), newLb.getCols()).ones();
	}
	else
		cerr << "Lb is not in the expected format.";
!!!253048.cpp!!!	setLb(in newLb : Matrix, in newSigmaLb : Matrix) : void
	if (newLb.getRows() >= 8 && newLb.getCols() == 1)
	{
		Lb = newLb;
		if (newSigmaLb.getRows() == newLb.getRows() && newSigmaLb.getCols() == newLb.getCols())
			SigmaLb = newSigmaLb;
		else if (newSigmaLb.getRows() == newLb.getRows() && newSigmaLb.getCols() == newLb.getRows())
			SigmaLb = newSigmaLb;
		else
		{
			SigmaLb.resize(newLb.getRows(), newLb.getCols()).ones();
			cerr << "SigmaLb is not in the expected format.";
		}
	}
	else
		cerr << "Lb is not in the expected format.";
!!!253176.cpp!!!	getLb() : Matrix
	if (Lb.getCols() == 0)
  	marksToLb();
	return Lb;
!!!253304.cpp!!!	getSigmaLb() : Matrix
	return SigmaLb;
!!!253432.cpp!!!	setAnaFidMarks(in newAnaFidMarks : deque<AnalogFiductialMark>) : void
	anaFidMarks = newAnaFidMarks;
!!!253560.cpp!!!	getAnaFidMarks() : deque<AnalogFiductialMark>
	return anaFidMarks;
!!!253688.cpp!!!	putAnaFidMark(in newAnaFidMark : AnalogFiductialMark) : void
	anaFidMarks.push_back(newAnaFidMark);
!!!253816.cpp!!!	getAnaFidMark(in id : int) : AnalogFiductialMark
	for (unsigned int i = 0; i < anaFidMarks.size(); i++)
	if (anaFidMarks.at(i).getId() == id)
			return anaFidMarks.at(i);
	return AnalogFiductialMark();
!!!253944.cpp!!!	getAnaFidMarkAt(in index : uint) : AnalogFiductialMark
	if (index < anaFidMarks.size())
		return anaFidMarks.at(index);
	return AnalogFiductialMark();
!!!254072.cpp!!!	countAnaFidMarks() : int
	return anaFidMarks.size();
!!!254200.cpp!!!	deleteAnaFidMark(in id : int) : void
	for (unsigned int i = 0; i < anaFidMarks.size(); i++)
		if (anaFidMarks.at(i).getId() == id)
			anaFidMarks.erase(anaFidMarks.begin()+i);
!!!254328.cpp!!!	deleteAnaFidMarkAt(in index : uint) : void
	if (index < anaFidMarks.size())
		anaFidMarks.erase(anaFidMarks.begin()+index);
!!!254456.cpp!!!	clearAnaFidMarks() : void
	anaFidMarks.clear();
!!!254584.cpp!!!	objectType(in  : void) : string
	stringstream result;
	result << "SensorWithFiducialMarks " << id;
	return result.str();
!!!254712.cpp!!!	objectAssociations(in  : void) : string
	return "";
!!!254840.cpp!!!	is(in s : string) : bool
	return (s == "SensorWithFiducialMarks" ? true : false);
!!!254968.cpp!!!	xmlSetData(in xml : string) : void
	EDomElement root(xml);
        id = Conversion::stringToInt(root.attribute("key"));
	sensorId = root.elementByTagName("sensorId").toString();
	geometry = root.elementByTagName("geometry").toString();
	detector = root.elementByTagName("detector").toString();
	energySource = root.elementByTagName("energySource").toString();
	calculationMode = root.elementByTagName("calculationMode").toString();

	spectralRangesUnit = root.elementByTagName("spectralRanges").attribute("uom");
	deque<EDomElement> xmlSpectralRanges = root.elementsByTagName("spectralRange");
	spectralRanges.clear();
	for (unsigned int i = 0; i < xmlSpectralRanges.size(); i++)
	{
		SpectralRange* spec = new SpectralRange;
                spec->band = Conversion::stringToInt(xmlSpectralRanges.at(i).attribute("band"));
		spec->inferiorLimit = xmlSpectralRanges.at(i).elementByTagName("inferiorLimit").toDouble();
		spec->superiorLimit = xmlSpectralRanges.at(i).elementByTagName("superiorLimit").toDouble();
		spectralRanges.push_back(*spec);
	}

	description = root.elementByTagName("description").toString();
	calibrationCertificateNumber = root.elementByTagName("number").toString();
	calibrationCertificateNumber = root.elementByTagName("dispatch").toString();
	calibrationCertificateExpiration = root.elementByTagName("expiration").toString();

	EDomElement xmlFocalDistance = root.elementByTagName("focalDistance");
	focalDistanceUnit = xmlFocalDistance.attribute("uom");
	focalDistance = xmlFocalDistance.elementByTagName("value").toDouble();
	if (xmlFocalDistance.elementByTagName("sigma").isAvailable())
		focalDistanceSigma = xmlFocalDistance.elementByTagName("sigma").toDouble();
	else
		focalDistanceSigma = 1.0;

	deque<EDomElement> xmlRadialSymmetric = root.elementByTagName("radialSymmetric").children();
	rsCoefficients.clear();
	for (unsigned int i = 0; i < xmlRadialSymmetric.size(); i++)
	{
		RadialSymmetricDistortionCoefficient* radial = new RadialSymmetricDistortionCoefficient;
		radial->value = xmlRadialSymmetric.at(i).elementByTagName("value").toDouble();
		if (xmlRadialSymmetric.at(i).elementByTagName("sigma").isAvailable())
			radial->sigma = xmlRadialSymmetric.at(i).elementByTagName("sigma").toDouble();
		else
			radial->sigma = 1.0;
		rsCoefficients.push_back(*radial);
	}

	deque<EDomElement> xmlDecentered = root.elementByTagName("decentered").children();
	dCoefficients.clear();
	for (unsigned int i = 0; i < xmlDecentered.size(); i++)
	{
		DecenteredDistortionCoefficient* decentered = new DecenteredDistortionCoefficient;
		decentered->value = xmlDecentered.at(i).elementByTagName("value").toDouble();
		if (xmlDecentered.at(i).elementByTagName("sigma").isAvailable())
			decentered->sigma = xmlDecentered.at(i).elementByTagName("sigma").toDouble();
		else
			decentered->sigma = 1.0;
		dCoefficients.push_back(*decentered);
	}

	principalPointCoordinates.xmlSetData(root.elementByTagName("principalPointCoordinates").getContent());

	deque<EDomElement> xmlFiductial = root.elementsByTagName("fiductialMark");
	anaFidMarks.clear();
	for (unsigned int i = 0; i < xmlFiductial.size(); i++)
	{
		AnalogFiductialMark* fiductial = new AnalogFiductialMark;
		fiductial->xmlSetData(xmlFiductial.at(i).getContent());
		anaFidMarks.push_back(*fiductial);
	}
!!!255096.cpp!!!	xmlGetData() : string
	stringstream result;
        result << "<sensor key=\"" << Conversion::intToString(id) << "\">\n";
	result << "<sensorId>" << sensorId << "</sensorId>\n";
	result << "<type>\n";
	result << "<geometry>" << geometry << "</geometry>\n";
	result << "<platform>aerial</platform>\n";
	result << "<detector>" << detector << "</detector>\n";
	result << "<energySource>" << energySource << "</energySource>\n";
	result << "<calculationMode>" << calculationMode << "</calculationMode>\n";
	result << "<spectralRanges uom=\"" << spectralRangesUnit << "\">\n";
	for (unsigned int i = 0; i < spectralRanges.size(); i++)
	{
                result << "<spectralRange band=\"" << Conversion::intToString(spectralRanges.at(i).band) << "\">\n";
                result << "<inferiorLimit>" << Conversion::doubleToString(spectralRanges.at(i).inferiorLimit) << "</inferiorLimit>\n";
                result << "<superiorLimit>" << Conversion::doubleToString(spectralRanges.at(i).superiorLimit) << "</superiorLimit>\n";
		result << "</spectralRange>\n";
	}
	result << "</spectralRanges>\n";
	result << "</type>\n";
	result << "<description>" << description << "</description>\n";
	result << "<calibrationCertificate>\n";
	result << "<number>" << calibrationCertificateNumber << "</number>\n";
	result << "<expiration>" << calibrationCertificateExpiration << "</expiration>\n";
	result << "</calibrationCertificate>\n";
	result << "<focalDistance uom=\"" << focalDistanceUnit << "\">\n";
        result << "<value>" << Conversion::doubleToString(focalDistance) << "</value>\n";
	if (focalDistanceSigma == 1.0)
		result << "<sigma>Not Available</sigma>\n";
	else
                result << "<sigma>" << Conversion::doubleToString(focalDistanceSigma) << "</sigma>\n";
	result << "</focalDistance>\n";
	result << "<distortionCoefficients>\n";
	result << "<radialSymmetric>\n";
	for (unsigned int i = 0; i < rsCoefficients.size(); i++)
	{
		result << "<k" << i << ">\n";
                result << "<value>" << Conversion::doubleToString(rsCoefficients.at(i).value) << "</value>\n";
		if (rsCoefficients.at(i).sigma == 1.0)
			result << "<sigma>Not Available</sigma>\n";
		else
                        result << "<sigma>" << Conversion::doubleToString(rsCoefficients.at(i).sigma) << "</sigma>\n";
		result << "</k" << i << ">\n";
	}
	result << "</radialSymmetric>\n";
	result << "<decentered>\n";
	for (unsigned int i = 0; i < dCoefficients.size(); i++)
	{
		result << "<P" << i+1 << ">\n";
                result << "<value>" << Conversion::doubleToString(dCoefficients.at(i).value) << "</value>\n";
		if (dCoefficients.at(i).sigma == 1.0)
			result << "<sigma>Not Available</sigma>\n";
		else
                        result << "<sigma>" << Conversion::doubleToString(dCoefficients.at(i).sigma) << "</sigma>\n";
		result << "</P" << i+1 << ">\n";
	}
	result << "</decentered>\n";
	result << "</distortionCoefficients>\n";
	result << "<principalPointCoordinates uom=\"" << principalPointCoordinates.getUnit() << "\">\n";
	result << principalPointCoordinates.xmlGetData();
	result << "</principalPointCoordinates>\n";
	result << "<fiductialMarks uom=\"" << anaFidMarks.at(1).getUnit() << "\">\n";
	for (unsigned int i = 0; i < anaFidMarks.size(); i++)
	{
		result << anaFidMarks.at(i).xmlGetData() << "\n";
	}
	result << "</fiductialMarks>\n";
	result << "</sensor>\n";
	return result.str();
!!!255224.cpp!!!	marksToLb() : void
	Lb.resize(anaFidMarks.size() * 2,1);
	SigmaLb.resize(anaFidMarks.size() * 2,anaFidMarks.size() * 2).zero();
	for(unsigned int i = 0; i < anaFidMarks.size(); i++)
	{
		Lb.set(i*2+1,1,anaFidMarks.at(i).getXi());
		Lb.set(i*2+2,1,anaFidMarks.at(i).getEta());
		SigmaLb.set(i*2+1,i*2+1,anaFidMarks.at(i).getSigmaXi());
		SigmaLb.set(i*2+2,i*2+2,anaFidMarks.at(i).getSigmaEta());
		SigmaLb.set(i*2+1,i*2+2,anaFidMarks.at(i).getSigmaXiEta());
		SigmaLb.set(i*2+2,i*2+1,anaFidMarks.at(i).getSigmaXiEta());
	}
