class SRManager
!!!146808.cpp!!!	SRManager()
    manager = NULL;
    mySensor = NULL;
    myFlight = NULL;
    myImage = NULL;
    myIO = NULL;
    mySR = NULL;
	myTerrain = NULL;
    started = false;
    status = false;
!!!146936.cpp!!!	SRManager(inout manager : EFotoManager, inout myTerrain : Terrain, inout mySensor : Sensor, inout myFlight : Flight, inout myImage : Image, inout myIO : InteriorOrientation, inout mySR : SpatialRessection)
    this->manager = manager;
    this->mySensor = mySensor;
    this->myFlight = myFlight;
    this->myImage = myImage;
    this->myIO = myIO;
    this->mySR = mySR;
	this->myTerrain = myTerrain;
    started = false;
    status = false;
!!!147064.cpp!!!	~SRManager()

!!!147192.cpp!!!	setInterface(inout newInterface : SRUserInterface) : void
    myInterface = newInterface;
!!!147320.cpp!!!	getInterface() : SRUserInterface
    return myInterface;
!!!147448.cpp!!!	measurePoint(in id : int, in col : int, in lin : int) : bool
    if (started)
    {
        Point* pointToMeasure = myImage->getPoint(id);
        if (pointToMeasure != NULL)
        {
            pointToMeasure->putDigitalCoordinate(DigitalImageSpaceCoordinate(myImage->getId(), col, lin));
            mySR->selectPoint(id);
        }
        /* ERRO: ponto fora da imagem. */
        return true;
    }
    return false;
!!!147576.cpp!!!	selectPoint(in id : int) : void
    if (started)
    {
        mySR->selectPoint(id);
    }
!!!147704.cpp!!!	unselectPoint(in id : int) : void
    if (started)
    {
        mySR->unselectPoint(id);
    }
!!!147832.cpp!!!	pointToAnalog(in col : int, in lin : int) : deque<double>
    deque<double> result;
    result.push_back(myIO->digitalToAnalog(col, lin).getXi());
    result.push_back(myIO->digitalToAnalog(col, lin).getEta());
    return result;
!!!147960.cpp!!!	removePoint(in id : int) : bool
    if (started)
    {
        Point* pointToRemove = myImage->getPoint(id);
        if (pointToRemove != NULL)
        {
            mySR->unselectPoint(id);
        }
        /* ERRO: ponto fora da imagem. */
        return true;
    }
    return false;
!!!148088.cpp!!!	insertPointOnImage(in id : int) : bool
    if (started)
    {
        Point* pointToInsert = manager->instancePoint(id);
        if (pointToInsert != NULL)
        {
            myImage->putPoint(pointToInsert);
        }
        /* ERRO: ponto n√£o existe. */
        return true;
    }
    return false;
!!!148216.cpp!!!	removePointFromImage(in id : int) : bool
    if (started)
    {
        Point* pointToRemove = manager->instancePoint(id);
        if (pointToRemove != NULL)
        {
            pointToRemove->deleteDigitalCoordinate(myImage->getId());
        }
        return true;
        /* ERRO: ponto n√£o existe. */
    }
    return false;
!!!148344.cpp!!!	listSelectedPoints() : deque<string>
    deque<string> result;
    if (started)
    {
        deque<int> selectedPoints = mySR->getSelectedPoints();
        for (unsigned int i = 0; i < selectedPoints.size(); i++)
        {
            Point* myPoint = myImage->getPoint(selectedPoints.at(i));
            string value = Conversion::intToString(myPoint->getId());
            value += " ";
			value += myPoint->getPointId();
            value += " ";
            value += myPoint->getDescription();
            result.push_back(value);
        }
    }
    return result;
!!!148472.cpp!!!	listImagePoints() : deque<string>
    deque<string> result;
    if (started)
    {
        for (int i = 0; i < myImage->countPoints(); i++)
        {
            Point* myPoint = myImage->getPointAt(i);
            string value = Conversion::intToString(myPoint->getId());
            value += " ";
			value += myPoint->getPointId();
            value += " ";
            value += myPoint->getDescription();
            result.push_back(value);
        }
    }
    return result;
!!!148600.cpp!!!	listAllPoints() : deque<string>
    deque<string> result;
    if (started)
    {
        EDomElement xmlPoints(manager->getXml("points"));
        deque<EDomElement> allPoints = xmlPoints.children();
        for (unsigned int i = 0; i < allPoints.size(); i++)
        {
            string data = allPoints.at(i).getContent();
            if (data != "")
            {
                string value = allPoints.at(i).attribute("key");
                value += " ";
				value += allPoints.at(i).elementByTagName("pointId").toString();
                value += " ";
                value += allPoints.at(i).elementByTagName("description").toString();
                result.push_back(value);
            }
        }
    }
    return result;
!!!148728.cpp!!!	pointData(in index : int) : deque<string>
    deque<string> result;
    if (started)
    {
        Point* myPoint = myImage->getPointAt(index);
        result.push_back(Conversion::intToString(myPoint->getId()));
		result.push_back(myPoint->getPointId());
        result.push_back(myPoint->getDescription());
                result.push_back(Conversion::doubleToString(myPoint->getObjectCoordinate().getX(),3));
                result.push_back(Conversion::doubleToString(myPoint->getObjectCoordinate().getY(),3));
                result.push_back(Conversion::doubleToString(myPoint->getObjectCoordinate().getZ(),3));
        if (myPoint->hasDigitalCoordinate(myImage->getId()) && myPoint->getDigitalCoordinate(myImage->getId()).isAvailable())
        {
            result.push_back(Conversion::intToString(myPoint->getDigitalCoordinate(myImage->getId()).getCol()));
            result.push_back(Conversion::intToString(myPoint->getDigitalCoordinate(myImage->getId()).getLin()));
            AnalogImageSpaceCoordinate aisc = myImage->getIO()->digitalToAnalog(myPoint->getDigitalCoordinate(myImage->getId()));
                        result.push_back(Conversion::doubleToString(aisc.getXi(),3));
                        result.push_back(Conversion::doubleToString(aisc.getEta(),3));
        }
    }
    return result;
!!!148856.cpp!!!	countSelectedPoints() : uint
    return listSelectedPoints().size();
!!!148984.cpp!!!	connectImagePoints() : bool
    if (!(started)) /* Sim, esse mÈtodo È executado antes do mÛdulo ser iniciado, e n„o deve ser executado depois. */
    {
        EDomElement xmlPoints(manager->getXml("points"));
        deque<EDomElement> allPoints = xmlPoints.children();
        for (unsigned int i = 0; i < allPoints.size(); i++)
        {
            string data = allPoints.at(i).elementByTagAtt("imageCoordinates", "image_key", Conversion::intToString(myImage->getId())).getContent();
            if (data != "")
            {
                Point* pointToInsert = manager->instancePoint(Conversion::stringToInt(allPoints.at(i).attribute("key")));
                if (pointToInsert != NULL)
                {
                    myImage->putPoint(pointToInsert);
                }
            }
        }
        return true;
    }
    return false;
!!!149112.cpp!!!	updatePointsTable() : bool
    if (started)
    {
        return true;
    }
    return false;
!!!149240.cpp!!!	flightDirection(in MarkId : int) : bool
    if (started)
    {
        mySR->selectFiductialMarkForFlightDirection(MarkId);
        return true;
    }
    return false;
!!!149368.cpp!!!	flightDirection(in col : int, in lin : int) : bool
    if (started)
    {
        mySR->setPointForFlightDirection(col, lin);
        return true;
    }
    return false;
!!!149496.cpp!!!	calculateSR(in iterations : int, in gnssPrecision : double, in insPrecision : double) : bool
    if (started)
    {
        if (mySR->countSelectedPoints() > 3)
        {
            mySR->initialize();
			mySR->calculate(iterations, gnssPrecision, insPrecision);
        }
        return true;
    }
    return false;
!!!149624.cpp!!!	exteriorDone() : bool
	if (mySR->getXa().getRows() != 6)
		return false;
	return true;
!!!149752.cpp!!!	makeReport() : deque<string>
	qDebug(mySR->getLa().xmlGetData().c_str());

	// Modificado em 27/06/2011 a pedido do Prof Nunes para exibir La e Sigma La se existirem. A saber o codigo anterior exibia Lb e sigma de Lb.
    deque<string> result;
    result.push_back(mySR->getXa().xmlGetData());
	result.push_back(mySR->getLa().xmlGetData());
    result.push_back(Conversion::doubleToString(myIO->getQuality().getsigma0Squared()));
    result.push_back(mySR->getQuality().getV().xmlGetData());
    result.push_back(mySR->getQuality().getSigmaXa().xmlGetData());
    result.push_back(mySR->getQuality().getSigmaLa().xmlGetData());
    result.push_back(Conversion::intToString(mySR->getTotalIterations()));
    if (mySR->getConverged())
        result.push_back("yes");
    else
        result.push_back("no");
    return result;
!!!149880.cpp!!!	exec() : bool
    if (manager != NULL && mySensor != NULL && myFlight != NULL && myImage != NULL && myIO != NULL && mySR != NULL)
        if (myImage->getSensorId() == mySensor->getId() && myImage->getFlightId() == myFlight->getId() &&
            myFlight->getSensorId() == mySensor->getId() && myIO->getImageId() == myImage->getId() &&
            mySR->getImageId() == myImage->getId())
        {
		if (manager->getInterfaceType().compare("Qt") == 0)
		{
			//myInterface = new SRUserInterface_Qt(this);
			myInterface = SRUserInterface_Qt::instance(this);
		}
        myImage->setSensor(mySensor);
        myImage->setFlight(myFlight);
        myImage->setIO(myIO);
        myFlight->setSensor(mySensor);
        myIO->setImage(myImage);
        mySR->setImage(myImage);
        connectImagePoints();
        started = true;
		if (myInterface != NULL)
		{
			myInterface->exec();
		}
    }
    return status;
!!!150008.cpp!!!	getId() : int
	if (myImage != NULL)
	{
		return myImage->getId();
	}
	return 0;
!!!150136.cpp!!!	returnProject() : void
	manager->reloadProject();
!!!150264.cpp!!!	save(in path : string) : bool
    if (started)
    {
        FILE* pFile;
        string output = "IO state data for Image " + Conversion::intToString(myImage->getId()) + "\n\n";

        output += mySensor->xmlGetData();
        output += "\n";
        output += myFlight->xmlGetData();
        output += "\n";
        output += myImage->xmlGetData();
        output += "\n";
        output += myIO->xmlGetData();
        output += "\n";
        output += mySR->xmlGetData();
        output += "\n";
        for (unsigned int i = 0; i < myPoints.size(); i++)
        {
            output += myPoints.at(i)->xmlGetData();
            output += "\n";
        }

        EDomElement e(output);
		output = e.indent('\t').getContent();

        const char* buffer = output.c_str();
        pFile = fopen (path.c_str(), "wb");
        fwrite (buffer, 1, output.length(), pFile);
        fclose (pFile);
        return true;
    }
    return false;
!!!150392.cpp!!!	load(in path : string) : bool
    if (started)
    {
        FILE* pFile;
        long lSize;
        char* buffer;
        size_t result;

        pFile = fopen (path.c_str(), "rb");
        if (pFile==NULL) {fputs ("File error",stderr); exit (1);}

        fseek (pFile , 0 , SEEK_END);
        lSize = ftell (pFile);
        rewind (pFile);

        buffer = (char*) malloc (sizeof(char)*lSize);
        if (buffer == NULL) {fputs ("Memory error",stderr); exit (2);}

        result = fread (buffer,1,lSize,pFile);
        if (result != lSize) {fputs ("Reading error",stderr); exit (3);}


        string strxml(buffer);
        EDomElement xml(strxml);

        mySensor->xmlSetData(xml.elementByTagName("Sensor").getContent());
        myFlight->xmlSetData(xml.elementByTagName("Flight").getContent());
        myImage->xmlSetData(xml.elementByTagName("image").getContent());
        myIO->xmlSetData(xml.elementByTagName("imageIO").getContent());
        mySR->xmlSetData(xml.elementByTagName("imageEO").getContent());

        deque<EDomElement> xmlPoints = xml.elementsByTagName("Point");
        for (unsigned int i = 0; i < xmlPoints.size(); i++)
        {

        }

        fclose (pFile);
        free (buffer);
    }
    return false;
!!!150520.cpp!!!	getImageFile() : string
    if (myImage->getFilepath() == ".")
        return myImage->getFilename();
    else
    {
        string result = "";
        result += myImage->getFilepath();
        result += "/";
        result += myImage->getFilename();
        return result;
    }
!!!150648.cpp!!!	acceptSR() : void
    EDomElement newXml(manager->xmlGetData());
    if (newXml.elementByTagAtt("imageEO", "image_key", Conversion::intToString(myImage->getId())).getContent() != "")
        newXml.replaceChildByTagAtt("imageEO", "image_key", Conversion::intToString(myImage->getId()), mySR->xmlGetData());
    else
        newXml.addChildAtTagName("exteriorOrientation", mySR->xmlGetData());
    int currentPointId;
	for (int i = 0; i < myImage->countPoints(); i++)
    {
        currentPointId = myImage->getPointAt(i)->getId();
        newXml.replaceChildByTagAtt("point", "key", Conversion::intToString(currentPointId), myImage->getPointAt(i)->xmlGetData());
    }
    manager->xmlSetData(newXml.getContent());
	manager->setSavedState(false);
