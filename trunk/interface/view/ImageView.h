/****************************************************************************
**
**This file was generated by the author
**
**Marcelo Teixeira Silveira, E-FOTO 2006
****************************************************************************/

#ifndef IMAGEVIEW_H
#define IMAGEVIEW_H

#include <QPainter>
#include <QImage>
#include <QPoint>
#include <QString>
#include <QCursor>
#include <QBitmap>
#include <QMessageBox>
#include <QRect>
#include <QPolygon>
#include <QMouseEvent>
#include <QWheelEvent>
#include <QGraphicsView>
#include <QGraphicsScene>
#include <QGraphicsItem>
#include <QStandardItemModel>

#include <iostream>
using namespace std;


class ImageView : public QGraphicsView
{
    Q_OBJECT

    QCursor* handUp;
    QCursor* handDown;
    QCursor* zoomCur;
    QRect rubberBandRect;
    
    //QRect viewportArea;
    QGraphicsScene* graphicsScene;
    QList<QGraphicsItem*> points;
    QGraphicsItem* flightDirection;
    QImage* image;
    QPixmap* view;
    QPainter* painter;

public:
    ImageView(QWidget* parent = 0);
    ImageView(QString file, QWidget* parent = 0);

public slots:
    void setViewMode(int m);
    void fitView();
    void clearGraphicsScene();
    void drawPoints(QStandardItemModel* points, int mode);
    void drawPoint(int x, int y, int mode);
    void drawFlightDirection(int x, int y);
    bool loadImage(QString file);

signals:
    void sendCoord(QPoint);
    void markClicked(QPoint);
    void flightDirectionClicked(QPoint);
    void mouseReleased();
    void screenRefreshed();

protected:
    void createCursors();
    void mousePressEvent(QMouseEvent *e);
    //void mouseMoveEvent(QMouseEvent *e);
    void mouseReleaseEvent(QMouseEvent *e);
    void wheelEvent(QWheelEvent *e);
    void scaleView(qreal scaleFactor);
    //void paintEvent(QPaintEvent *event );

    int mode, dx, dy, adjustX, adjustY;
    bool windowChanged;
    QPoint currentPos;

};

#endif // IMAGEVIEW_H
